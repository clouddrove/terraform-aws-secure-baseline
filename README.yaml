---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name : Terraform AWS Secure Baseline

# License of this project
license: "MIT"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-secure-baseline

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v0.12-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-MIT-blue.svg"
    url: "LICENSE.md"

#  description of this project
description: |-
  Terraform module to create an Secure Basline, inclued module is alarm baseline, config baseline, and clouddtrail baseline.

# extra content
include:
  - "terraform.md"

# How to use this project
usage : |-
  ### Simple Example
  Here is an example of how you can use this module in your inventory structure:
  ```hcl
  module "secure_baseline" {
    source = "git::https://github.com/clouddrove/terraform-aws-secure-baseline.git?ref=tags/0.12.1"
    application = "clouddrove"
    environment = "test"
    label_order = ["environment", "application", "name"]
    enabled                           = true
    key_deletion_window_in_days       = 10
    cloudwatch_logs_retention_in_days = 365
    cloudwatch_logs_group_name        = "cloudtrail-log-group"
    alarm_namespace                   = "Alert_Alarm"
    s3_bucket_name                    = "cloudtrail-bucket"
    config_s3_bucket_name             = "config-bucket"
    slack_webhook                     = "https://hooks.slack.com/services/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uEG4TW"
    slack_channel                     = "testing"
    s3_policy                         = data.aws_iam_policy_document.default.json
  }

  data "aws_iam_policy_document" "default" {
    statement {
      sid = "AWSCloudTrailAclCheck"

      principals {
        type        = "Service"
        identifiers = ["cloudtrail.amazonaws.com"]
      }

      actions = [
        "s3:GetBucketAcl",
      ]

      resources = ["arn:aws:s3:::cloudtrail-bucket-logs"]
    }

    statement {
      sid = "AWSCloudTrailWrite"

      principals {
        type        = "Service"
        identifiers = ["cloudtrail.amazonaws.com"]
      }

      actions = [
        "s3:PutObject",
      ]

      resources = compact(
        concat(
          [format("arn:aws:s3:::cloudtrail-bucket-logs/AWSLogs/%s/*", data.aws_caller_identity.current.account_id)]
        )
      )

      condition {
        test     = "StringEquals"
        variable = "s3:x-amz-acl"

        values = [
          "bucket-owner-full-control",
        ]
      }
    }
  }

  ```